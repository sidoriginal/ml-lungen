# -*- coding: utf-8 -*-
"""LUNG.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zD1csWPmI8pGM18o-o5pI5yTg7tvE5M_
"""

import pandas as pd
import seaborn as sns
import itertools
from sklearn.preprocessing import MinMaxScaler
from sklearn.model_selection import train_test_split
import numpy as np
from pyparsing import alphanums

df=pd.read_csv("survey lung cancer.csv")

df.head()

type(df['LUNG_CANCER'])

df['LUNG_CANCER'] = df['LUNG_CANCER'].map(
                   {'YES':2 ,'NO':1})

df.head()

df = df.replace({2:1 ,1:0})

df.head()

df.head()

df1 = pd.get_dummies(df['GENDER'], prefix="")
# col1=df1['_M']
# col2=df1['_F']
# df.join(col1)
# df.join(col2)
# df.head()
name=list(df.columns.values)
name
name1=['F','M']
name=[name1,name]
namef=list(itertools.chain(*name))
namef
fin=pd.concat([df1, df], axis=1, ignore_index=True)
fin.columns=namef

fin=fin.drop(['GENDER'],axis=1)
fin.head()

fin.corr(method="pearson")

sc=MinMaxScaler()
fin.head()

# df=sc.fit_transform(fin)
# df
# column_l=list(fin.columns.values)

fin.head()

# final=pd.DataFrame(df,columns=column_l)
final=fin

final.head()

train_set, test_set=train_test_split(final,test_size=0.2, random_state=42)
print(len(test_set),len(train_set))

train_x=train_set.drop("LUNG_CANCER",axis=1)
train_y=train_set["LUNG_CANCER"].copy()
test_x=test_set.drop("LUNG_CANCER",axis=1)
test_y=test_set["LUNG_CANCER"].copy()

train_x
train_y
test_x

"""# LOGISTIC REGRESSION"""

from sklearn.linear_model import LogisticRegression 
from sklearn.metrics import accuracy_score,confusion_matrix,classification_report,mean_squared_error
classifier= LogisticRegression(random_state=0)  
classifier.fit(train_x,train_y)

pred_y= classifier.predict(test_x)

accuracy_score(test_y,pred_y)

test_y

pred_y

mse=mean_squared_error(pred_y,test_y)
rmse=np.sqrt(mse)
print(mse)
print(rmse)

"""# Decision tree"""

from sklearn.tree import DecisionTreeClassifier  
classifier= DecisionTreeClassifier(criterion='entropy', random_state=0)  
classifier.fit(train_x,train_y)

pred_y= classifier.predict(test_x)

accuracy_score(test_y,pred_y)

test_y

pred_y

mse=mean_squared_error(pred_y,test_y)
rmse=np.sqrt(mse)
print(mse)
print(rmse)

"""# Random Forest"""

from sklearn.ensemble import RandomForestClassifier  
classifier= RandomForestClassifier(n_estimators= 20, criterion="entropy")  
classifier.fit(train_x,train_y)

pred_y= classifier.predict(test_x)

accuracy_score(test_y,pred_y)

test_y

pred_y

mse=mean_squared_error(pred_y,test_y)
rmse=np.sqrt(mse)
print(mse)
print(rmse)

import pickle
pickle.dump(classifier,open('model.pkl','wb'))